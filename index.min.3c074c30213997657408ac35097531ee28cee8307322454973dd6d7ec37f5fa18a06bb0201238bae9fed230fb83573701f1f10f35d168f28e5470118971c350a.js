var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/docs/",title:"Docs",description:"Docs",content:""}),e.add({id:1,href:"/docs/docs/introduction/",title:"Introduction",description:"fox is a tool helps you install packages from private (and public) GitHub repositories",content:`What does fox do? # Makes is trivial to install a package form a GitHub repository even if it\u0026rsquo;s private. Fox packages are just GitHub releases, as long as you have read access to a repo, you can install (pretty much) anything you want. Fox installs packages to a specific directory /usr/local/bin/Fox/bin (on macOS and linux systems). It won\u0026rsquo;t install anything outside that directory. Trivially create your own packages. To add your repo to the available packages list, all you need to do is edit a yaml file. That\u0026rsquo;s it! What fox does NOT do? # Requires you te learn a whole new set of made up words to use. Run post-install scripts that may do something nasty to your machine. Check the Quick Start â†’ section to learn more.
`}),e.add({id:2,href:"/docs/docs/quick-start/",title:"âš¡ Quick Start",description:"This small section is meant to help you get started in no time.",content:`Dependencies: # âš“ Required # This tool is as zero-dependencies as it can possibly get.
GitHub CLI to install packages. Don\u0026rsquo;t worry if you don\u0026rsquo;t have it already, just follow the installation instructions below; you can run fox gh to install it ðŸ˜‰. That\u0026rsquo;s it. Seriously, you don\u0026rsquo;t need to install anything more.
Why the GitHub CLI? In order to install packages from private repos, you need to have an access token. GitHub\u0026rsquo;s official CLI manages these automatically for you.
Plus, GitHub APIs are rate-limited when using them anonymously to avoid abuse, by using the gh CLI we can avoid any issues.
Installation # Getting started is as easy as 1, 2, 3.
1.) Just run:
sudo curl -fsSL \u0026quot;install.getfox.sh\u0026quot; | bash Follow the on-screen instructions to add fox to your \$PATH.
2.) Install the official GitHub CLI, if you don\u0026rsquo;t already have it. Relax, you can run fox gh to install it ðŸ˜‰. Then run gh auth. To setup authentication. I recommend using ssh keys, so you never have to use a password.
3.) That\u0026rsquo;s it! That wasn\u0026rsquo;t so bad, was it?
If you did everything correctly you can try running the following command:
fox doctor This will check your environment for potential problems and possible enhancements.
How to install packages # There are lots of amazing packages in the central repository of public packages installable by fox (find it here).
Just run the following command to see the list:
fox list Once you have a package that you want to install, just do a quick:
fox install \u0026lt;package-name\u0026gt; And presto! You installed your first package.
Go further # Learn how to make your own packages installable using fox in the next section.
`}),e.add({id:3,href:"/docs/adding_packages/",title:"Adding Packages",description:"Adding Packages",content:""}),e.add({id:4,href:"/docs/adding_packages/introduction/",title:"Introduction",description:"Learn how to make your package installable with fox",content:`This section is designed to show you how to set your package in a way that it can be installed with fox.
ðŸ’¡ The instructions apply no matter if your package is public or private. Introduction # Let\u0026rsquo;s say that you created a useful tool, and you want to share it with others.
For example: you made a bash script that renames files in a folder to a standard format, and you want to share it with your coworkers.
You create a repo for it. Add some detailed installation instructions to the README.md and make sure it is in a nice format.
However, as you might expect, not everybody reads the manual. Or your team has people that are not that tech-savy and don\u0026rsquo;t know how to move something to /usr/local/bin or what a symlink is.
The truth is: people like (expect) one-liner instructions. You could try to create an installer script for your tool, but having to create one might even be more work than creating your original script was!
Plus, how do you deal with updates for new features and bug fixes. Do you send a @here message in slack to let everybody know that you pushed an update? Do you really think people will read it and pull the changes?
That\u0026rsquo;s when you try to add your little script to an existing package manager, but since it is private, you quickly learn how hard it is to do so.
You need to create a ruby file (ðŸ¤®), learn all sort of made up words, ask people to create special files ot set env vars for tokens, and that\u0026rsquo;s just the beginning.
There has to be a better way. It shouldn\u0026rsquo;t be that hard.
There is a better way, you can use fox to help you. The gist of the process is:
You create a GitHub repo for your package You create a release for it You create a YAML file with some information about your packages Your team adds one line to a config file And that\u0026rsquo;s it! Now they can install and update your tool with one command Go to the next page to learn how to make your package installable with fox.
`}),e.add({id:5,href:"/docs/adding_packages/add-a-remote/",title:"Adding a remote",description:"Adding a remote",content:`This section is designed to show you how to set your package in a way that it can be installed with fox.
ðŸ’¡ There is an official remote with hand-cured packages that you can install right away. You can find it here. If you have a cool package that you want to share with the whole world, feel free to submit a PR, and I\u0026rsquo;ll gladly check it out. How to make my package installable with fox # To install a package, first fox needs to know where to find it. To achieve this, you need to add a remote to your repositories file, which is located at ~/.fox/repositories.yaml.
The remotes section of this YAMl file consists of a list of items with the following format:
remotes: - url: \u0026quot;\u0026quot; # string - a url where to find a packages YAML file type: \u0026quot;github\u0026quot; # string - either 'open' or 'github' The value for url is a string that fox will use to look for a YAMl file with your packages. The value for type is a string that can be either github or open. Use open if the url is public (eg. on your own server, an S3 bucket, etc), or use github if the file is hosted on a private/public GitHub repo.
Example ~/.fox/repositories.yaml:
remotes: - url: \u0026quot;repos/\u0026lt;OWNER\u0026gt;/\u0026lt;REPO_NAME\u0026gt;/contents/packages.yaml\u0026quot; type: \u0026quot;github\u0026quot; - url: \u0026quot;https://raw.githubusercontent.com/ricardofabila/test/main/repositories.yaml\u0026quot; type: \u0026quot;open\u0026quot; Note: notice how the the url for the github type is not a full url, but a GitHub path.
You can edit the file directly using your preferred editor to add remotes, but you can also use the following command:
fox add remote --url \u0026quot;the url\u0026quot; --type \u0026quot;open|github\u0026quot; Use fox add remote -h for help.
Continue to know what this remote file consists of.
`}),e.add({id:6,href:"/docs/adding_packages/create-a-remote/",title:"Creating a remote",description:"Creating a remote file",content:`How to create a remote # A remote is just a YAMl file that consists of a list of packages. It has the following format:
packages: - path: \u0026quot;me/hello\u0026quot; # string - GitHub repository with the format OWNER/REPO # this is GitHub's standard format # just look at the URL of any repo (like this one) executableName: \u0026quot;hello\u0026quot; # string - The name you want people to type # when using your tool type: \u0026quot;binary\u0026quot; # string - Either 'binary' for executables or 'script' for # arbitrary scripts (eg. bash scripts)] # The following is a list of optional dependencies, may ignore if there are none dependsOn: - \u0026quot;dependency_name\u0026quot; # - string Example:
packages: - path: zyedidia/micro executableName: micro type: binary - path: ricardofabila/rand-stand executableName: rand-stand type: script dependsOn: - bun Keep reading to learn how to create a package.
`}),e.add({id:7,href:"/docs/adding_packages/create-a-package/",title:"Creating a package",description:"Creating a script and binary package",content:`How to create a package # Finally, to make your package installable, all you need it to have a GitHub release (not a draft) for it.
Make sure your repo has a release with attached assets. Right now only binary executables and scripts (Eg. bash scripts) are supported. They can be contained in a zip/tarball or be at the root level. If your package is an executable, make sure your release has the binaries with the appropriate name for the OS and the architecture. It doesn\u0026rsquo;t have to be perfect as fox will try to fuzzy search for the best match. Normally this are created for you if you use a build tool (eg. goreleaser)
Example:
- mypkg_darwin_amd64_v1 - mypkg_darwin_arm64 - mypkg_linux_386 - mypkg_linux_amd64_v1 - mypkg_linux_arm64 - mypkg_windows_386.exe - mypkg_windows_amd64_v1.exe - mypkg_windows_arm64.exe If your package is a script. Just have the script file in the repository with the name you choose as your executableName in the YAML entry. Take a look at rand-stand as an example.
Alternatively, you can have the script file in the assets with the name you choose as your executableName in the YAML entry. This is useful if you don\u0026rsquo;t have the final script file in the repo contents, as it may get build in some sort of bundling phase (eg: you use emacs to write your script using literate programing and have the final script created with some command).
Example:
- myscript.sh Add your package to your remote file following the format described in the example on the \u0026ldquo;Creating a remote\u0026rdquo; section: Example of your remote YAML file:
packages: - path: me/bff executableName: bff type: binary dependsOn: - curl - path: company-name/a-tool executableName: tool type: script dependsOn: - wget - zsh And that\u0026rsquo;s it! Now you can run:
fox install tool Can I test how my package will be installed before adding it to the file? # Of course, you can! In your ~/.fox/repositories.yaml file, there is a section called packages. That section is a list of packages. It follows the exact format described above.
You can use this section to add you package locally and test how fox will install it. Very useful if you want to test that you did everything right when creating your release.
Example:
In your ~/.fox/repositories.yaml:
packages: - path: me/my-thing executableName: my-thing type: binary dependsOn: - curl And now you can run the following to make sure you did every thing right:
fox install my-thing `}),e.add({id:8,href:"/docs/adding_packages/install-a-public-package/",title:"Install a public package",description:"Installing public packages",content:`How to install a public package # Incidentally, using the packages list in your local repositories file, you can install packages that are on GitHub but the auth didn\u0026rsquo;t add it to a package manager*. All without needed the package authors to even know that fox exists. As long as their releases follow a pattern that fox can understand (which is the same pattern most package managers use), you should be able to do it (exceptions apply).
We can use this repo I randomly found as an example:
packages: - path: metadelta/mdlt executableName: mdlt type: binary You can edit the ~/.fox/repositories.yaml file manually, or you can run the command to do it automatically:
fox add package --path \u0026quot;metadelta/mdlt\u0026quot; --type \u0026quot;binary\u0026quot; --executableName \u0026quot;mdlt\u0026quot; And now you can do fox update and then a quick fox install mdlt and bam! You have it without the author needing to do anything.
* I can\u0026rsquo;t blame them, it is unnecessary difficult; specially for private repos. That\u0026rsquo;s why I made ðŸ¦Š fox in the first place. It was easier to create a new package manager that works on macOS and linux than to add my CLI tool to HomeBrew because it was a private repo.
`}),e.add({id:9,href:"/docs/help/",title:"Help",description:"Help",content:""}),e.add({id:10,href:"/docs/help/faq/",title:"FAQ",description:"Answers to some frequently asked questions.",content:`Why another package manager # Because it was easier for me to create a new package manager from scratch than to add a private repo to homebrew. Also, fox works on linux, while I have never seen anyone successfully install homebrew on a linux system and actually use it. Trust me, I tried.
Do I need to have a remote YAML file if I have repos on my own that I want to install via fox # No. In your ~/.fox/repositories.yaml file there is an entry called packages which you can use to add a package that you want to be able to install via fox. It can even be a GitHub repo that doesn\u0026rsquo;t even know that fox exists! As long as it has releases that comply with what fox expects (which is what most package managers expect), you can install it via fox ðŸ˜œ.
This is useful too if you have a private packages of your own, and you want to make it easy to install them on different systems.
I have a public package that I want to make installable via fox for everyone # Fox has an official repositories list that fox knows to look for by default. If you have a public package that you want to add it to the list, feel free to open a PR on this repo with your entry to the YAML file. Attach links to the GitHub repo, and a short description of what your package does, and I\u0026rsquo;ll add it to the list.
ðŸ’¡ You can find it at here Why not Windows support? # Because I have not used a Windows machine in many years. While windows does a few things better than unix systems, the way it handles its PATH is not one of them. Having it being a GUI thingy is too cumbersome. I am not saying that a colon-separated ENV string is a good alternative. It is not! But at least it is easier to manage.
I know there is a way to do it programmatically, but since I have no easy access to a Windows machine at the moment, I just can\u0026rsquo;t do it right now. Feel free to use the tip button, so I can get one sooner ðŸ˜œ.
In all seriousness, I do plan to add Windows support and work on a VM, but is not the highest priority right now.
Are private repos only supported? # No. You can add public repos just the same way as a private repo. fox uses the official gh CLI, so as long as you can see the repo you want to install from. You are good to go.
Why no post-install scripts support? # While most packages use post-install scripts for normal things like updating man pages, and such. Arbitrary code execution without the user\u0026rsquo;s explicit approval is something I am quite firmly against. This is one of the reasons I don\u0026rsquo;t like NPM. While it does offer a flag to turn that off, if you do, most packages stop working completely. This is also the reason why if you run brew install with sudo it yells at you.
I am not letting fox to allow someone to add a post install script that has rm -rf / in it. Even by accident.
Perhaps in the future I can add support for post-install scripts, but since fox was conceived specifically for private repos, it is not a priority. you can let your team know if they need to do something post installation in the README or something.
The worst thing that could happen is that fox gets wide adoption with a fundamental flaw just because I didn\u0026rsquo;t put enough though about the implications. This is how we got stuck with things that are massively used but are simple wrong and shouldn\u0026rsquo;t exist they way they do. Things like: NPM, Java, JavaScript, unix, AngularJS, Object Oriented Programming, PHP, Vladimir Putin, and many more. I am sure that the creators of these things didn\u0026rsquo;t intend these things to have the wide adoption that they do while never being able to fix the fundamental flaws they missed on the early stages.
I already have a few ideas on how to tackle this, but it still in the early stages.
`}),e.add({id:11,href:"/docs/",title:"Docs",description:"Docs",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()